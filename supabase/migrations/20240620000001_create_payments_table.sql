-- Create payments table if it doesn't exist
CREATE TABLE IF NOT EXISTS payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  booking_id BIGINT REFERENCES bookings(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  amount DECIMAL(12, 2) NOT NULL,
  payment_method TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  transaction_id TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Remove the realtime publication line since the table is already a member
-- ALTER PUBLICATION supabase_realtime ADD TABLE payments;

-- Create RLS policies for payments table
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- Allow users to view their own payments
DROP POLICY IF EXISTS "Users can view their own payments" ON payments;
CREATE POLICY "Users can view their own payments"
  ON payments FOR SELECT
  USING (auth.uid() = user_id);

-- Allow staff to view all payments
DROP POLICY IF EXISTS "Staff can view all payments" ON payments;
CREATE POLICY "Staff can view all payments"
  ON payments FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM users
    WHERE users.id = auth.uid()
    AND users.role_id IN (SELECT id FROM roles WHERE role_name IN ('Admin', 'Manager', 'Staff'))
  ));

-- Allow staff to insert payments
DROP POLICY IF EXISTS "Staff can insert payments" ON payments;
CREATE POLICY "Staff can insert payments"
  ON payments FOR INSERT
  WITH CHECK (EXISTS (
    SELECT 1 FROM users
    WHERE users.id = auth.uid()
    AND users.role_id IN (SELECT id FROM roles WHERE role_name IN ('Admin', 'Manager', 'Staff'))
  ));

-- Allow staff to update payments
DROP POLICY IF EXISTS "Staff can update payments" ON payments;
CREATE POLICY "Staff can update payments"
  ON payments FOR UPDATE
  USING (EXISTS (
    SELECT 1 FROM users
    WHERE users.id = auth.uid()
    AND users.role_id IN (SELECT id FROM roles WHERE role_name IN ('Admin', 'Manager', 'Staff'))
  ));
